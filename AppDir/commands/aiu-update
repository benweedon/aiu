#!/usr/bin/env fish

source (dirname (status filename))/../utils

argparse --name aiu-update 'h/help' -- $argv
or exit
handle_help_switch commands/aiu-update $_flag_help

function format_appimage_name -a name
    isatty stdout
    and set_color --bold red

    echo -e "$name"

    set_color normal
end

function format_update_output
    while read -l line
        echo "    $line"
    end
    echo
end

function get_path_files
    set -l update_dir (get_update_dir)
    set -l path_files (ls -p "$update_dir" 2> /dev/null | grep -v / | grep -x ".\\+\\.paths")
    for file in $path_files
        echo "$update_dir/$file"
    end
end

function get_update_scripts -a appimage
    set -l path_files (get_path_files)
    for file in $path_files
        set -l contents (cat "$file")
        for line in $contents
            if [ "$line" = "$appimage" ]
                set -l script_path (string replace --regex ".paths\$" "" "$file")
                echo "$script_path"
                break
            end
        end
    end
end

function update_appimage -a appimage
    format_appimage_name (basename "$appimage")
    if aiu check --updatable "$appimage"
        appimageupdatetool --overwrite "$appimage" &| format_update_output
    else
        set -l update_scripts (get_update_scripts "$appimage")
        if [ (count $update_scripts) -eq 0 ]
            echo "Update not supported." &| format_update_output
            return
        end
        for script in $update_scripts
            APPIMAGE="$appimage" "$script" &| format_update_output
        end
    end
end

if [ -n "$argv[1]" ]
    set -l appimage $argv[1]
    update_appimage "$appimage"
else
    format_appimage_name "appimageupdatetool self-update"
    appimageupdatetool --self-update --overwrite &| format_update_output

    for appimage in (aiu list)
        update_appimage "$appimage"
    end
end
